// profile-color.js - –°–∏—Å—Ç–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è Quantum Messenger

class ProfileColorSystem {
    constructor() {
        this.currentUser = '';
        this.userId = '';
        this.userColor = '';
        this.isInitialized = false;
        
        // –ü–∞–ª–∏—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
        this.colorPalette = [
            '#4facfe', '#00f2fe', '#a0d2eb', '#7fdbda', '#6a9bd8',
            '#ff6b6b', '#ff9ff3', '#f368e0', '#00d2d3', '#54a0ff',
            '#5f27cd', '#c8d6e5', '#ff9f43', '#ee5253', '#0abde3',
            '#10ac84', '#222f3e', '#feca57', '#48dbfb', '#ff9ff3'
        ];
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    init(currentUser, userId) {
        if (!currentUser || !userId) {
            console.error('ProfileColorSystem: –ù–µ —É–∫–∞–∑–∞–Ω—ã currentUser –∏–ª–∏ userId');
            return;
        }

        this.currentUser = currentUser;
        this.userId = userId;
        this.isInitialized = true;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç
        this.loadUserColor();
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
        this.createColorPicker();
        
        console.log('ProfileColorSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    loadUserColor() {
        const savedColor = localStorage.getItem(`quantumUserColor_${this.userId}`);
        
        if (savedColor) {
            this.userColor = savedColor;
        } else {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã
            this.userColor = this.colorPalette[Math.floor(Math.random() * this.colorPalette.length)];
            this.saveUserColor();
        }
        
        this.applyUserColor();
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    saveUserColor() {
        localStorage.setItem(`quantumUserColor_${this.userId}`, this.userColor);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Firebase (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞)
        if (typeof database !== 'undefined') {
            database.ref('profiles/' + this.userId).update({
                userColor: this.userColor,
                lastColorChange: Date.now()
            });
        }
    }

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
    applyUserColor() {
        if (!this.userColor) return;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫ –∞–≤–∞—Ç–∞—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userAvatar = document.getElementById('userAvatar');
        if (userAvatar) {
            userAvatar.style.background = this.userColor;
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.colorizeUserMessages();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        this.updateCSSVariables();
    }

    // –û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    colorizeUserMessages() {
        const userMessages = document.querySelectorAll('.my-message');
        userMessages.forEach(message => {
            message.style.borderLeft = `3px solid ${this.userColor}`;
            message.style.background = `linear-gradient(to right, ${this.userColor}20, ${this.userColor}40)`;
        });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
    createColorPicker() {
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ª–∏—Ç—Ä—ã —Ü–≤–µ—Ç–æ–≤
        const colorPickerBtn = document.createElement('div');
        colorPickerBtn.className = 'action-btn';
        colorPickerBtn.id = 'colorPickerBtn';
        colorPickerBtn.innerHTML = '<i class="fas fa-palette"></i> <span>–¶–≤–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è</span>';
        colorPickerBtn.addEventListener('click', () => this.showColorPickerModal());

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userControls = document.querySelector('.user-controls');
        if (userControls) {
            userControls.appendChild(colorPickerBtn);
        }

        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
        this.createColorPickerModal();
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
    createColorPickerModal() {
        const modalHTML = `
            <div class="modal" id="colorPickerModal">
                <div class="modal-content">
                    <h3>üé® –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è</h3>
                    
                    <div class="current-color-preview">
                        <div class="color-preview-box" id="currentColorPreview"></div>
                        <span>–¢–µ–∫—É—â–∏–π —Ü–≤–µ—Ç</span>
                    </div>
                    
                    <div class="color-palette-container">
                        <h4>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞:</h4>
                        <div class="color-palette" id="colorPalette"></div>
                    </div>
                    
                    <div class="custom-color-section">
                        <h4>–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ü–≤–µ—Ç:</h4>
                        <input type="color" id="customColorPicker" value="${this.userColor}">
                        <button class="action-btn" id="applyCustomColorBtn">–ü—Ä–∏–º–µ–Ω–∏—Ç—å</button>
                    </div>
                    
                    <div class="color-presets">
                        <h4>–ì–æ—Ç–æ–≤—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏:</h4>
                        <div class="preset-buttons">
                            <button class="preset-btn" data-preset="blue">–°–∏–Ω—è—è —Ç–µ–º–∞</button>
                            <button class="preset-btn" data-preset="green">–ó–µ–ª–µ–Ω–∞—è —Ç–µ–º–∞</button>
                            <button class="preset-btn" data-preset="purple">–§–∏–æ–ª–µ—Ç–æ–≤–∞—è —Ç–µ–º–∞</button>
                            <button class="preset-btn" data-preset="sunset">–ó–∞–∫–∞—Ç–Ω–∞—è —Ç–µ–º–∞</button>
                        </div>
                    </div>
                    
                    <div class="modal-buttons">
                        <button class="modal-btn secondary" id="closeColorPickerBtn">–ó–∞–∫—Ä—ã—Ç—å</button>
                        <button class="modal-btn primary" id="saveColorBtn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                    </div>
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ DOM
        if (!document.getElementById('colorPickerModal')) {
            document.body.insertAdjacentHTML('beforeend', modalHTML);
            this.setupColorPickerEvents();
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–∞–ª–∏—Ç—Ä—ã —Ü–≤–µ—Ç–æ–≤
    setupColorPickerEvents() {
        const modal = document.getElementById('colorPickerModal');
        const closeBtn = document.getElementById('closeColorPickerBtn');
        const saveBtn = document.getElementById('saveColorBtn');
        const customColorBtn = this.getElementById('applyCustomColorBtn');
        const presetBtns = document.querySelectorAll('.preset-btn');

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        closeBtn.addEventListener('click', () => {
            modal.classList.remove('active');
        });

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
        saveBtn.addEventListener('click', () => {
            this.saveUserColor();
            modal.classList.remove('active');
            this.showNotification('–¶–≤–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è –∏–∑–º–µ–Ω–µ–Ω! üé®');
        });

        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
        document.getElementById('applyCustomColorBtn').addEventListener('click', () => {
            const customColor = document.getElementById('customColorPicker').value;
            this.changeColor(customColor);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Å–µ—Ç–æ–≤
        presetBtns.forEach(btn => {
            btn.addEventListener('click', (e) => {
                const preset = e.target.getAttribute('data-preset');
                this.applyColorPreset(preset);
            });
        });

        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∞–ª–∏—Ç—Ä—ã —Ü–≤–µ—Ç–æ–≤
        this.populateColorPalette();

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –æ–∫–Ω–∞
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.classList.remove('active');
            }
        });
    }

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∞–ª–∏—Ç—Ä—ã —Ü–≤–µ—Ç–æ–≤
    populateColorPalette() {
        const paletteContainer = document.getElementById('colorPalette');
        if (!paletteContainer) return;

        paletteContainer.innerHTML = '';

        this.colorPalette.forEach(color => {
            const colorOption = document.createElement('div');
            colorOption.className = 'color-option';
            colorOption.style.backgroundColor = color;
            colorOption.setAttribute('data-color', color);
            
            if (color === this.userColor) {
                colorOption.classList.add('selected');
            }

            colorOption.addEventListener('click', () => {
                this.changeColor(color);
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —É –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                document.querySelectorAll('.color-option').forEach(opt => {
                    opt.classList.remove('selected');
                });
                
                // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                colorOption.classList.add('selected');
            });

            paletteContainer.appendChild(colorOption);
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é —Ç–µ–∫—É—â–µ–≥–æ —Ü–≤–µ—Ç–∞
        this.updateColorPreview();
    }

    // –°–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞
    changeColor(newColor) {
        this.userColor = newColor;
        this.applyUserColor();
        this.updateColorPreview();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–∏–∫–µ—Ä —Ü–≤–µ—Ç–∞
        document.getElementById('customColorPicker').value = newColor;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é —Ü–≤–µ—Ç–∞
    updateColorPreview() {
        const preview = document.getElementById('currentColorPreview');
        if (preview) {
            preview.style.backgroundColor = this.userColor;
        }
    }

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ç–æ–≤—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤
    applyColorPreset(preset) {
        const presets = {
            'blue': '#4facfe',
            'green': '#00d2d3', 
            'purple': '#5f27cd',
            'sunset': '#ff9f43'
        };

        if (presets[preset]) {
            this.changeColor(presets[preset]);
        }
    }

    // –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
    showColorPickerModal() {
        const modal = document.getElementById('colorPickerModal');
        if (modal) {
            this.updateColorPreview();
            modal.classList.add('active');
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    updateCSSVariables() {
        document.documentElement.style.setProperty('--user-color', this.userColor);
        document.documentElement.style.setProperty('--user-color-light', this.userColor + '40');
        document.documentElement.style.setProperty('--user-color-dark', this.darkenColor(this.userColor, 20));
    }

    // –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
    darkenColor(color, percent) {
        const num = parseInt(color.replace("#", ""), 16);
        const amt = Math.round(2.55 * percent);
        const R = (num >> 16) - amt;
        const G = (num >> 8 & 0x00FF) - amt;
        const B = (num & 0x0000FF) - amt;
        
        return "#" + (
            0x1000000 +
            (R < 255 ? R < 1 ? 0 : R : 255) * 0x10000 +
            (G < 255 ? G < 1 ? 0 : G : 255) * 0x100 +
            (B < 255 ? B < 1 ? 0 : B : 255)
        ).toString(16).slice(1);
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    getElementById(id) {
        return document.getElementById(id);
    }

    // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    showNotification(message) {
        if (typeof showNotification === 'function') {
            showNotification(message);
        } else {
            alert(message);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ü–≤–µ—Ç–∞
    getCurrentColor() {
        return this.userColor;
    }

    // –°–±—Ä–æ—Å –∫ —Ü–≤–µ—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    resetToDefault() {
        const defaultColor = this.colorPalette[0];
        this.changeColor(defaultColor);
        this.saveUserColor();
        this.showNotification('–¶–≤–µ—Ç —Å–±—Ä–æ—à–µ–Ω –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É');
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã —Ü–≤–µ—Ç–æ–≤
window.profileColorSystem = new ProfileColorSystem();

// CSS —Å—Ç–∏–ª–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ü–≤–µ—Ç–æ–≤
const profileColorStyles = `
    .color-palette-container {
        margin: 20px 0;
    }

    .color-palette {
        display: grid;
        grid-template-columns: repeat(5, 1fr);
        gap: 10px;
        margin: 15px 0;
    }

    .color-option {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        cursor: pointer;
        border: 2px solid transparent;
        transition: all 0.3s ease;
    }

    .color-option:hover {
        transform: scale(1.1);
        border-color: #fff;
        box-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
    }

    .color-option.selected {
        border-color: #fff;
        transform: scale(1.1);
        box-shadow: 0 0 15px rgba(255, 255, 255, 0.8);
    }

    .current-color-preview {
        display: flex;
        align-items: center;
        gap: 15px;
        margin-bottom: 20px;
        padding: 15px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 10px;
    }

    .color-preview-box {
        width: 50px;
        height: 50px;
        border-radius: 10px;
        border: 2px solid var(--border-color);
    }

    .custom-color-section {
        margin: 20px 0;
        padding: 15px;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 10px;
    }

    #customColorPicker {
        width: 100%;
        height: 50px;
        margin: 10px 0;
        border: none;
        background: transparent;
    }

    .color-presets {
        margin: 20px 0;
    }

    .preset-buttons {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 10px;
        margin-top: 10px;
    }

    .preset-btn {
        padding: 10px;
        border: none;
        border-radius: 5px;
        background: var(--action-btn-bg);
        color: var(--text-color);
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .preset-btn:hover {
        transform: translateY(-2px);
        opacity: 0.9;
    }

    @media (max-width: 768px) {
        .color-palette {
            grid-template-columns: repeat(4, 1fr);
        }

        .preset-buttons {
            grid-template-columns: 1fr;
        }
    }
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç
const styleElement = document.createElement('style');
styleElement.textContent = profileColorStyles;
document.head.appendChild(styleElement);

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
    setTimeout(() => {
        const currentUser = localStorage.getItem('quantumUsername');
        const userId = localStorage.getItem('quantumUserId');
        
        if (currentUser && userId) {
            profileColorSystem.init(currentUser, userId);
        }
        
        // –¢–∞–∫–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —á–∞—Ç
        const originalEnterChat = window.enterChat;
        if (originalEnterChat) {
            window.enterChat = function() {
                const result = originalEnterChat.apply(this, arguments);
                const currentUser = localStorage.getItem('quantumUsername');
                const userId = localStorage.getItem('quantumUserId');
                
                if (currentUser && userId) {
                    profileColorSystem.init(currentUser, userId);
                }
                
                return result;
            };
        }
    }, 1000);
});
