// ai-chat-assistant.js
// –ò–ò-–ê–°–°–ò–°–¢–ï–ù–¢ –î–õ–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ò –ß–ê–¢–ê –ò –£–ú–ù–´–• –û–¢–í–ï–¢–û–í - –ú–û–ë–ò–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø

class AIChatAssistant {
    constructor() {
        this.isEnabled = false;
        this.sentimentAnalysis = true;
        this.topicDetection = true;
        this.smartReplies = true;
        this.chatStats = {};
        this.isMobile = this.detectMobile();
    }

    detectMobile() {
        return window.innerWidth <= 768 || /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    }

    init() {
        this.createAISettings();
        this.setupEventListeners();
        this.startChatAnalysis();
        this.addTouchOptimizations();
    }

    createAISettings() {
        const aiSettingsHTML = `
            <div class="modal mobile-optimized" id="aiAssistantModal">
                <div class="modal-content mobile-content">
                    <div class="modal-header mobile-header">
                        <h3>ü§ñ –ò–ò-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç</h3>
                        <button class="close-btn mobile-close" id="closeAIBtn">&times;</button>
                    </div>
                    
                    <div class="settings-category mobile-category">
                        <h4>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞</h4>
                        <div class="ai-stats mobile-stats" id="aiStats">
                            <div class="stat-item mobile-stat">
                                <span class="stat-label">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</span>
                                <span class="stat-value" id="chatActivity">...</span>
                            </div>
                            <div class="stat-item mobile-stat">
                                <span class="stat-label">–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:</span>
                                <span class="stat-value" id="chatMood">...</span>
                            </div>
                            <div class="stat-item mobile-stat">
                                <span class="stat-label">–¢–µ–º—ã:</span>
                                <span class="stat-value" id="chatTopics">...</span>
                            </div>
                        </div>
                    </div>

                    <div class="settings-category mobile-category">
                        <h4>‚öôÔ∏è –§—É–Ω–∫—Ü–∏–∏</h4>
                        <div class="mobile-switches">
                            <label class="switch mobile-switch">
                                <input type="checkbox" id="sentimentAnalysisToggle" checked>
                                <span class="slider mobile-slider"></span>
                                <span class="switch-label mobile-label">–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è</span>
                            </label>
                            
                            <label class="switch mobile-switch">
                                <input type="checkbox" id="topicDetectionToggle" checked>
                                <span class="slider mobile-slider"></span>
                                <span class="switch-label mobile-label">–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º</span>
                            </label>
                            
                            <label class="switch mobile-switch">
                                <input type="checkbox" id="smartRepliesToggle" checked>
                                <span class="slider mobile-slider"></span>
                                <span class="switch-label mobile-label">–£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã</span>
                            </label>
                        </div>
                    </div>

                    <div class="settings-category mobile-category">
                        <h4>üí° –°–æ–≤–µ—Ç—ã</h4>
                        <div class="ai-recommendations mobile-recommendations" id="aiRecommendations">
                            <div class="recommendation-item mobile-rec-item">
                                <i class="fas fa-lightbulb"></i>
                                <span>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —á–∞—Ç...</span>
                            </div>
                        </div>
                    </div>

                    <div class="modal-buttons mobile-buttons">
                        <button class="modal-btn secondary mobile-btn" id="aiInsightsBtn">–ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç</button>
                        <button class="modal-btn primary mobile-btn" id="quickActionBtn">–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç</button>
                    </div>

                    <!-- –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö -->
                    <div class="quick-actions mobile-actions" id="quickActions">
                        <button class="quick-btn" data-action="greeting">üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ</button>
                        <button class="quick-btn" data-action="question">‚ùì –í–æ–ø—Ä–æ—Å</button>
                        <button class="quick-btn" data-action="thanks">üôè –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å</button>
                    </div>
                </div>
            </div>
        `;

        document.body.insertAdjacentHTML('beforeend', aiSettingsHTML);
        this.addAIStyles();
    }

    addAIStyles() {
        const styles = `
            /* –ú–æ–±–∏–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è */
            .mobile-optimized {
                font-size: 16px !important; /* –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ iOS */
            }

            .mobile-content {
                width: 95% !important;
                max-width: 400px !important;
                margin: 10px auto !important;
                max-height: 90vh !important;
                overflow-y: auto !important;
                -webkit-overflow-scrolling: touch !important;
            }

            .mobile-header {
                display: flex !important;
                justify-content: space-between !important;
                align-items: center !important;
                padding: 15px 20px 10px !important;
                border-bottom: 1px solid rgba(255,255,255,0.1) !important;
            }

            .mobile-header h3 {
                margin: 0 !important;
                font-size: 18px !important;
            }

            .mobile-close {
                background: none !important;
                border: none !important;
                color: white !important;
                font-size: 24px !important;
                cursor: pointer !important;
                padding: 0 !important;
                width: 30px !important;
                height: 30px !important;
                display: flex !important;
                align-items: center !important;
                justify-content: center !important;
            }

            .mobile-category {
                margin: 15px 0 !important;
                padding: 0 20px !important;
            }

            .mobile-category h4 {
                font-size: 16px !important;
                margin-bottom: 12px !important;
                color: #4facfe !important;
            }

            .mobile-stats {
                background: rgba(255, 255, 255, 0.08) !important;
                padding: 12px !important;
                border-radius: 12px !important;
                margin-bottom: 0 !important;
            }

            .mobile-stat {
                display: flex !important;
                justify-content: space-between !important;
                align-items: center !important;
                margin-bottom: 10px !important;
                padding-bottom: 10px !important;
                border-bottom: 1px solid rgba(255,255,255,0.05) !important;
                font-size: 14px !important;
            }

            .mobile-stat:last-child {
                margin-bottom: 0 !important;
                border-bottom: none !important;
            }

            .stat-label {
                font-weight: 500 !important;
                opacity: 0.9 !important;
            }

            .stat-value {
                font-weight: bold !important;
                color: #4facfe !important;
                text-align: right !important;
                max-width: 60% !important;
                word-break: break-word !important;
            }

            .mobile-switches {
                display: flex !important;
                flex-direction: column !important;
                gap: 12px !important;
            }

            .mobile-switch {
                display: flex !important;
                align-items: center !important;
                margin-bottom: 0 !important;
                padding: 10px !important;
                background: rgba(255,255,255,0.05) !important;
                border-radius: 10px !important;
                min-height: 44px !important; /* –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è —Ç–∞—á–∞ */
            }

            .mobile-slider {
                width: 44px !important;
                height: 24px !important;
                margin-right: 12px !important;
                flex-shrink: 0 !important;
            }

            .mobile-label {
                font-size: 14px !important;
                flex-grow: 1 !important;
            }

            .mobile-recommendations {
                background: rgba(255, 255, 255, 0.05) !important;
                padding: 15px !important;
                border-radius: 12px !important;
                border-left: 4px solid #4facfe !important;
            }

            .mobile-rec-item {
                display: flex !important;
                align-items: flex-start !important;
                gap: 12px !important;
                margin-bottom: 10px !important;
                font-size: 14px !important;
                line-height: 1.4 !important;
            }

            .mobile-rec-item:last-child {
                margin-bottom: 0 !important;
            }

            .mobile-rec-item i {
                color: #4facfe !important;
                margin-top: 2px !important;
                flex-shrink: 0 !important;
            }

            .mobile-buttons {
                display: flex !important;
                gap: 10px !important;
                padding: 15px 20px !important;
                border-top: 1px solid rgba(255,255,255,0.1) !important;
            }

            .mobile-btn {
                flex: 1 !important;
                padding: 12px 16px !important;
                border: none !important;
                border-radius: 10px !important;
                font-size: 14px !important;
                font-weight: 600 !important;
                cursor: pointer !important;
                min-height: 44px !important;
                transition: all 0.2s ease !important;
            }

            .mobile-btn.secondary {
                background: rgba(255,255,255,0.1) !important;
                color: white !important;
            }

            .mobile-btn.primary {
                background: linear-gradient(135deg, #4facfe, #00f2fe) !important;
                color: white !important;
            }

            .mobile-actions {
                display: flex !important;
                gap: 8px !important;
                padding: 0 20px 15px !important;
                flex-wrap: wrap !important;
            }

            .quick-btn {
                flex: 1 !important;
                min-width: 100px !important;
                padding: 10px 12px !important;
                background: rgba(79, 172, 254, 0.2) !important;
                border: 1px solid rgba(79, 172, 254, 0.3) !important;
                border-radius: 8px !important;
                color: #4facfe !important;
                font-size: 12px !important;
                cursor: pointer !important;
                min-height: 40px !important;
                transition: all 0.2s ease !important;
            }

            .quick-btn:active {
                background: rgba(79, 172, 254, 0.4) !important;
                transform: scale(0.98) !important;
            }

            /* –ê–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö */
            @keyframes mobileSlideUp {
                from {
                    opacity: 0;
                    transform: translateY(50px);
                }
                to {
                    opacity: 1;
                    transform: translateY(0);
                }
            }

            .mobile-optimized.active {
                animation: mobileSlideUp 0.3s ease-out !important;
            }

            /* –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞ */
            @media (max-width: 360px) {
                .mobile-content {
                    width: 98% !important;
                    margin: 5px auto !important;
                }
                
                .mobile-category {
                    padding: 0 15px !important;
                }
                
                .mobile-buttons {
                    padding: 12px 15px !important;
                }
                
                .mobile-actions {
                    padding: 0 15px 12px !important;
                }
                
                .quick-btn {
                    min-width: 80px !important;
                    font-size: 11px !important;
                }
            }

            /* –ü–æ—Ä—Ç—Ä–µ—Ç–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è */
            @media (max-height: 600px) and (orientation: portrait) {
                .mobile-content {
                    max-height: 85vh !important;
                }
                
                .mobile-category {
                    margin: 10px 0 !important;
                }
            }

            /* –õ–∞–Ω–¥—à–∞—Ñ—Ç–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è */
            @media (max-height: 400px) and (orientation: landscape) {
                .mobile-content {
                    max-height: 80vh !important;
                }
                
                .mobile-stats {
                    padding: 8px !important;
                }
                
                .mobile-stat {
                    margin-bottom: 6px !important;
                    padding-bottom: 6px !important;
                    font-size: 13px !important;
                }
            }

            /* –£–ª—É—á—à–µ–Ω–∏—è –¥–ª—è iOS */
            @supports (-webkit-touch-callout: none) {
                .mobile-btn, .quick-btn, .mobile-switch {
                    -webkit-tap-highlight-color: transparent;
                }
                
                .mobile-content {
                    padding-bottom: env(safe-area-inset-bottom);
                }
            }

            /* –£–ª—É—á—à–µ–Ω–∏—è –¥–ª—è Android */
            @supports not (-webkit-touch-callout: none) {
                .mobile-btn:active, .quick-btn:active {
                    opacity: 0.8;
                }
            }
        `;

        const styleSheet = document.createElement('style');
        styleSheet.textContent = styles;
        document.head.appendChild(styleSheet);
    }

    addTouchOptimizations() {
        // –£–ª—É—á—à–µ–Ω–∏—è –¥–ª—è —Ç–∞—á-—É—Å—Ç—Ä–æ–π—Å—Ç–≤
        document.addEventListener('touchstart', function() {}, {passive: true});
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –¥–≤–æ–π–Ω–æ–º —Ç–∞–ø–µ
        let lastTouchEnd = 0;
        document.addEventListener('touchend', function(event) {
            const now = (new Date()).getTime();
            if (now - lastTouchEnd <= 300) {
                event.preventDefault();
            }
            lastTouchEnd = now;
        }, false);
    }

    setupEventListeners() {
        // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
        const aiBtn = document.createElement('div');
        aiBtn.className = this.isMobile ? 'mobile-ai-btn action-btn' : 'action-btn';
        aiBtn.innerHTML = this.isMobile ? '<i class="fas fa-robot"></i>' : '<i class="fas fa-robot"></i> <span>–ò–ò –ê–Ω–∞–ª–∏–∑</span>';
        aiBtn.onclick = () => this.openAIModal();
        
        const userControls = document.querySelector('.user-controls');
        if (userControls) {
            userControls.insertBefore(aiBtn, userControls.querySelector('.logout-btn'));
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π
        document.getElementById('sentimentAnalysisToggle').addEventListener('change', (e) => {
            this.sentimentAnalysis = e.target.checked;
            this.showToast(`–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è ${e.target.checked ? '–≤–∫–ª—é—á—ë–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}`);
        });

        document.getElementById('topicDetectionToggle').addEventListener('change', (e) => {
            this.topicDetection = e.target.checked;
            this.showToast(`–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º ${e.target.checked ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}`);
        });

        document.getElementById('smartRepliesToggle').addEventListener('change', (e) => {
            this.smartReplies = e.target.checked;
            this.showToast(`–£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã ${e.target.checked ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã'}`);
        });

        document.getElementById('closeAIBtn').addEventListener('click', () => {
            this.closeAIModal();
        });

        document.getElementById('aiInsightsBtn').addEventListener('click', () => {
            this.generateFullReport();
        });

        document.getElementById('quickActionBtn').addEventListener('click', () => {
            this.showQuickReplySuggestions();
        });

        // –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        document.querySelectorAll('.quick-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const action = e.target.getAttribute('data-action');
                this.handleQuickAction(action);
            });
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        document.getElementById('aiAssistantModal').addEventListener('click', (e) => {
            if (e.target.id === 'aiAssistantModal') {
                this.closeAIModal();
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∏ Escape
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.closeAIModal();
            }
        });
    }

    openAIModal() {
        const modal = document.getElementById('aiAssistantModal');
        modal.classList.add('active');
        document.body.style.overflow = 'hidden'; // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        this.updateAIStats();
        
        // –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        setTimeout(() => {
            document.getElementById('sentimentAnalysisToggle').focus();
        }, 300);
    }

    closeAIModal() {
        const modal = document.getElementById('aiAssistantModal');
        modal.classList.remove('active');
        document.body.style.overflow = ''; // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª
    }

    showToast(message) {
        // –°–æ–∑–¥–∞–µ–º —Ç–æ—Å—Ç –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        const toast = document.createElement('div');
        toast.className = 'mobile-toast';
        toast.textContent = message;
        toast.style.cssText = `
            position: fixed;
            bottom: 80px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0,0,0,0.8);
            color: white;
            padding: 12px 20px;
            border-radius: 25px;
            font-size: 14px;
            z-index: 10000;
            animation: fadeInOut 2s ease-in-out;
            max-width: 80%;
            text-align: center;
        `;

        document.body.appendChild(toast);

        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        }, 2000);
    }

    startChatAnalysis() {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        if (typeof database !== 'undefined') {
            database.ref('messages').orderByChild('timestamp').limitToLast(50).on('value', (snapshot) => {
                if (!snapshot.exists()) return;

                const messages = [];
                snapshot.forEach((childSnapshot) => {
                    const message = childSnapshot.val();
                    if (message.text && !message.isSystem && message.type !== 'gift') {
                        try {
                            const decryptedText = typeof decryptMessage === 'function' ? 
                                decryptMessage(message.text) : message.text;
                            messages.push({
                                text: decryptedText,
                                user: message.name,
                                timestamp: message.timestamp
                            });
                        } catch (e) {
                            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
                        }
                    }
                });

                this.analyzeChat(messages);
            });
        } else {
            // Fallback –¥–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞
            console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–º–æ-—Ä–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞');
            this.demoChatAnalysis();
        }
    }

    demoChatAnalysis() {
        // –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
        const demoMessages = [
            { text: "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ö–∞–∫ –¥–µ–ª–∞?", user: "User1", timestamp: Date.now() - 100000 },
            { text: "–í—Å—ë –æ—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ! –ê —É —Ç–µ–±—è?", user: "User2", timestamp: Date.now() - 80000 },
            { text: "–¢–æ–∂–µ —Ö–æ—Ä–æ—à–æ, —Å–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞", user: "User1", timestamp: Date.now() - 60000 },
            { text: "–î–∞, —Å–æ–ª–Ω—Ü–µ —Å–≤–µ—Ç–∏—Ç –ø—Ä–æ—Å—Ç–æ —Å—É–ø–µ—Ä!", user: "User3", timestamp: Date.now() - 40000 },
            { text: "–ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ?", user: "User2", timestamp: Date.now() - 20000 }
        ];

        setInterval(() => {
            this.analyzeChat(demoMessages);
        }, 10000);
    }

    analyzeChat(messages) {
        if (messages.length === 0) return;

        // –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        const now = Date.now();
        const lastHour = now - (60 * 60 * 1000);
        const recentMessages = messages.filter(m => m.timestamp > lastHour);
        const activityLevel = recentMessages.length;

        // –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        const positiveWords = ['—Ö–æ—Ä–æ—à–æ', '–æ—Ç–ª–∏—á–Ω–æ', '—Å–ø–∞—Å–∏–±–æ', '–Ω—Ä–∞–≤–∏—Ç—Å—è', '–ª—é–±–ª—é', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ', '—Å—É–ø–µ—Ä', '–∫–ª–∞—Å—Å', '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ', '—Ä–∞–¥'];
        const negativeWords = ['–ø–ª–æ—Ö–æ', '—É–∂–∞—Å–Ω–æ', '–Ω–µ–Ω–∞–≤–∏–∂—É', '–∑–ª–æ–π', '–≥—Ä—É—Å—Ç–Ω–æ', '—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω', '–ø—Ä–æ–±–ª–µ–º–∞', '—Å–ª–æ–∂–Ω–æ'];
        
        let positiveCount = 0;
        let negativeCount = 0;

        messages.forEach(message => {
            const text = message.text.toLowerCase();
            positiveWords.forEach(word => {
                if (text.includes(word)) positiveCount++;
            });
            negativeWords.forEach(word => {
                if (text.includes(word)) negativeCount++;
            });
        });

        const mood = positiveCount > negativeCount ? 'üòä –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π' : 
                    negativeCount > positiveCount ? 'üòû –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π' : 'üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π';

        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–º
        const commonWords = this.extractTopics(messages);

        // –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const users = {};
        messages.forEach(message => {
            users[message.user] = (users[message.user] || 0) + 1;
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.chatStats = {
            activity: activityLevel,
            mood: mood,
            topics: commonWords.slice(0, 3),
            messageCount: messages.length,
            positive: positiveCount,
            negative: negativeCount,
            users: users,
            activeUsers: Object.keys(users).length
        };

        this.updateAIStats();
        this.generateRecommendations();
    }

    extractTopics(messages) {
        const stopWords = ['–∏', '–≤', '–Ω–∞', '—Å', '–ø–æ', '–æ', '—É', '–∫', '–Ω–æ', '–∞', '–∏–ª–∏', '—á—Ç–æ', '—ç—Ç–æ', '–∫–∞–∫', '–¥–ª—è', '—Ç–æ', '–∂–µ', '–≤—Å–µ', '—Ç–∞–∫'];
        const wordCount = {};

        messages.forEach(message => {
            const words = message.text.toLowerCase()
                .replace(/[^\w\s–∞-—è—ë]/g, ' ')
                .split(/\s+/)
                .filter(word => word.length > 2 && !stopWords.includes(word));

            words.forEach(word => {
                wordCount[word] = (wordCount[word] || 0) + 1;
            });
        });

        return Object.entries(wordCount)
            .sort((a, b) => b[1] - a[1])
            .slice(0, 5)
            .map(([word]) => word);
    }

    updateAIStats() {
        if (!this.chatStats.activity) return;

        const activityElem = document.getElementById('chatActivity');
        const moodElem = document.getElementById('chatMood');
        const topicsElem = document.getElementById('chatTopics');

        if (activityElem) {
            activityElem.textContent = `${this.chatStats.activity} —Å–æ–æ–±—â./—á–∞—Å`;
        }

        if (moodElem) {
            moodElem.textContent = this.chatStats.mood;
        }

        if (topicsElem) {
            topicsElem.textContent = this.chatStats.topics.join(', ') || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã';
        }
    }

    generateRecommendations() {
        const recommendations = document.getElementById('aiRecommendations');
        if (!recommendations) return;

        const recs = [];

        if (this.chatStats.activity < 3) {
            recs.push('üí¨ –ß–∞—Ç –Ω–µ–º–Ω–æ–≥–æ —Ç–∏—Ö–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —Ç–µ–º—É!');
        }

        if (this.chatStats.negative > this.chatStats.positive) {
            recs.push('ü§ó –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–∑–∏—Ç–∏–≤–∞!');
        } else if (this.chatStats.positive > this.chatStats.negative * 2) {
            recs.push('üåü –û—Ç–ª–∏—á–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!');
        }

        if (this.chatStats.topics.length > 0) {
            recs.push(`üéØ –¢–µ–º–∞: "${this.chatStats.topics[0]}". –†–∞–∑–≤–∏–≤–∞–π—Ç–µ –µ—ë!`);
        }

        if (this.chatStats.activeUsers < 3) {
            recs.push('üë• –ú–∞–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ü—Ä–∏–≤–ª–µ–∫–∏—Ç–µ –±–æ–ª—å—à–µ –ª—é–¥–µ–π –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ!');
        }

        if (recs.length === 0) {
            recs.push('üí´ –ß–∞—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω. –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!');
        }

        recommendations.innerHTML = recs.map(rec => 
            `<div class="recommendation-item mobile-rec-item">${rec}</div>`
        ).join('');
    }

    generateFullReport() {
        const report = `
ü§ñ –û–¢–ß–Å–¢ –ò–ò-–ê–°–°–ò–°–¢–ï–ù–¢–ê

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —á–∞—Å: ${this.chatStats.activity || 0}
‚Ä¢ –û–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${this.chatStats.mood || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${this.chatStats.activeUsers || 0}

üéØ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã:
${(this.chatStats.topics && this.chatStats.topics.length > 0) ? 
    this.chatStats.topics.map(topic => `‚Ä¢ ${topic}`).join('\n') : '‚Ä¢ –¢–µ–º—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã'}

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
${this.chatStats.activity < 5 ? '‚Ä¢ –ó–∞–¥–∞–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –∞–∫—Ç–∏–≤–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞\\n' : ''}
${this.chatStats.negative > this.chatStats.positive ? '‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π –Ω–æ–≤–æ—Å—Ç—å—é –∏–ª–∏ —à—É—Ç–∫–æ–π\\n' : ''}
${this.chatStats.activeUsers < 3 ? '‚Ä¢ –£–ø–æ–º—è–Ω–∏—Ç–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤–æ–≤–ª–µ—á–µ–Ω–∏—è\\n' : ''}

üìà –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${this.chatStats.activity > 15 ? '–í—ã—Å–æ–∫–∏–π' : this.chatStats.activity > 8 ? '–°—Ä–µ–¥–Ω–∏–π' : '–ù–∏–∑–∫–∏–π'}
        `.trim();

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º alert –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö (–ø—Ä–æ—Å—Ç–æ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∑–¥–µ)
        alert(report);
    }

    showQuickReplySuggestions() {
        const suggestions = [
            "–û—Ç–ª–∏—á–Ω–∞—è –º—ã—Å–ª—å! üí´",
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ? ü§î",
            "–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω! üëç",
            "–ö–∞–∫ –Ω–∞—Å—á—ë—Ç –æ–±—Å—É–¥–∏—Ç—å —ç—Ç–æ? üí¨",
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! üôè"
        ];

        const randomSuggestion = suggestions[Math.floor(Math.random() * suggestions.length)];
        this.showToast(`–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: "${randomSuggestion}"`);
        
        // –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        if (navigator.clipboard) {
            navigator.clipboard.writeText(randomSuggestion).then(() => {
                console.log('–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
            });
        }
    }

    handleQuickAction(action) {
        const actions = {
            greeting: "–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å –≤ —á–∞—Ç–µ! üëã",
            question: "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –£ –∫–æ–≥–æ-—Ç–æ –µ—Å—Ç—å –º—ã—Å–ª–∏ –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É? üí≠",
            thanks: "–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å! üòä"
        };

        const message = actions[action] || "–û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è! üí´";
        this.showToast(`–ì–æ—Ç–æ–≤–æ: "${message}"`);
        
        // –ú–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π
        if (typeof sendMessage === 'function') {
            sendMessage(message);
        } else if (navigator.clipboard) {
            navigator.clipboard.writeText(message);
            this.showToast("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ! üìã");
        }
    }

    // –£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    generateSmartReply(messageText) {
        if (!this.smartReplies) return null;

        const context = this.analyzeMessageContext(messageText);
        
        const replyTemplates = {
            question: [
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ß—Ç–æ –≤—ã —Å–∞–º–∏ –¥—É–º–∞–µ—Ç–µ?",
                "–•–æ—Ä–æ—à–æ, —á—Ç–æ —Å–ø—Ä–æ—Å–∏–ª–∏. –ú–æ–∂–µ—Ç, –æ–±—Å—É–¥–∏–º —ç—Ç–æ?",
                "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –£ –∫–æ–≥–æ-—Ç–æ –µ—Å—Ç—å –º—ã—Å–ª–∏?"
            ],
            greeting: [
                "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?",
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!",
                "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ß—Ç–æ –Ω–æ–≤–æ–≥–æ?"
            ],
            gratitude: [
                "–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å!",
                "–ù–µ —Å—Ç–æ–∏—Ç –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏!",
                "–û–±—Ä–∞—â–∞–π—Å—è! üòä"
            ],
            complaint: [
                "–ü–æ–Ω–∏–º–∞—é —Ç–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞. –ú–æ–∂–µ—Ç, –æ–±—Å—É–¥–∏–º —Ä–µ—à–µ–Ω–∏–µ?",
                "–ñ–∞–ª—å —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                "–ü–æ–Ω–∏–º–∞—é frustration. –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º—Å—è –≤–º–µ—Å—Ç–µ."
            ]
        };

        const category = this.categorizeMessage(messageText);
        const replies = replyTemplates[category] || ["–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ..."];
        
        return replies[Math.floor(Math.random() * replies.length)];
    }

    categorizeMessage(text) {
        if (!text) return 'neutral';
        
        text = text.toLowerCase();
        
        if (text.includes('?') || text.includes('–∫–∞–∫') || text.includes('–ø–æ—á–µ–º—É') || text.includes('—á—Ç–æ')) return 'question';
        if (text.includes('–ø—Ä–∏–≤–µ—Ç') || text.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π') || text.includes('–¥–æ–±—Ä—ã–π') || text.includes('hi')) return 'greeting';
        if (text.includes('—Å–ø–∞—Å–∏–±–æ') || text.includes('–±–ª–∞–≥–æ–¥–∞—Ä—é') || text.includes('thanks')) return 'gratitude';
        if (text.includes('–ø–ª–æ—Ö–æ') || text.includes('–∂–∞–ª–æ–±–∞') || text.includes('problem') || text.includes('–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')) return 'complaint';
        
        return 'neutral';
    }

    analyzeMessageContext(text) {
        return {
            length: text.length,
            hasQuestion: text.includes('?'),
            sentiment: this.analyzeSentiment(text),
            urgency: text.includes('!') ? 'high' : 'normal'
        };
    }

    analyzeSentiment(text) {
        if (!text) return 'neutral';
        
        const positive = ['—Ö–æ—Ä–æ—à', '–æ—Ç–ª–∏—á–Ω', '–ø—Ä–µ–∫—Ä–∞—Å–Ω', '–ª—é–±–ª', '–Ω—Ä–∞–≤–∏—Ç—Å—è', '—Å—É–ø–µ—Ä', '–∫–ª–∞—Å—Å', '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω', '—Ä–∞–¥', '–≤–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω'];
        const negative = ['–ø–ª–æ—Ö', '—É–∂–∞—Å–Ω', '–Ω–µ–Ω–∞–≤–∏–∂', '–∑–ª–æ', '–≥—Ä—É—Å—Ç–Ω', '—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω', '—Å–ª–æ–∂–Ω', '—Ç—Ä—É–¥–Ω', '–ø—Ä–æ–±–ª–µ–º'];
        
        text = text.toLowerCase();
        let score = 0;
        
        positive.forEach(word => { if (text.includes(word)) score++; });
        negative.forEach(word => { if (text.includes(word)) score--; });
        
        return score > 0 ? 'positive' : score < 0 ? 'negative' : 'neutral';
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –º–æ–±–∏–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
let aiAssistant;

function initAIAssistant() {
    // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            aiAssistant = new AIChatAssistant();
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            setTimeout(() => aiAssistant.init(), 1000);
        });
    } else {
        aiAssistant = new AIChatAssistant();
        setTimeout(() => aiAssistant.init(), 1000);
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
initAIAssistant();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = AIChatAssistant;
}