// channels-enhanced-fixed.js - –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–∞–Ω–∞–ª–æ–≤ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –¥–≤–æ–π–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏

class EnhancedChannelSystem {
    constructor() {
        this.currentChannel = 'general';
        this.channels = {
            'general': { name: 'üì¢ –û–±—â–∏–π', description: '–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –æ–±—â–µ–Ω–∏—è', color: '#4FACE5' },
            'random': { name: 'üé≤ –°–ª—É—á–∞–π–Ω–æ—Å—Ç–∏', description: '–û–±—Å—É–∂–¥–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–µ–º', color: '#9B59B6' },
            'games': { name: 'üéÆ –ò–≥—Ä—ã', description: '–û–±—Å—É–∂–¥–µ–Ω–∏–µ –∏–≥—Ä –∏ –∏–≥—Ä–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π', color: '#E74C3C' },
            'help': { name: '‚ùì –ü–æ–º–æ—â—å', description: '–ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞', color: '#2ECC71' },
            'offtopic': { name: 'üí¨ –§–ª—É–¥–∏–ª–∫–∞', description: '–°–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ', color: '#F39C12' }
        };
        this.channelMembers = {};
        this.messagesListener = null;
        this.unreadCounts = {};
        this.lastReadTimestamps = {};
        this.isDropdownOpen = false;
        this.isSendingMessage = false; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥–≤–æ–π–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        this.originalSendFunction = null; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        
        this.init();
    }

    init() {
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∫–∞–Ω–∞–ª–æ–≤...');
        this.loadUserPreferences();
        this.createChannelUI();
        this.loadChannelMessages();
        this.overrideSendMessage();
        this.setupEventListeners();
        this.initializeChannelStats();
    }

    loadUserPreferences() {
        try {
            const savedChannel = localStorage.getItem('lastChannel');
            const savedTimestamps = localStorage.getItem('channelReadTimestamps');
            
            if (savedChannel && this.channels[savedChannel]) {
                this.currentChannel = savedChannel;
            }
            
            if (savedTimestamps) {
                this.lastReadTimestamps = JSON.parse(savedTimestamps);
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
            Object.keys(this.channels).forEach(channel => {
                this.unreadCounts[channel] = 0;
                if (!this.lastReadTimestamps[channel]) {
                    this.lastReadTimestamps[channel] = Date.now();
                }
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        }
    }

    saveUserPreferences() {
        try {
            localStorage.setItem('lastChannel', this.currentChannel);
            localStorage.setItem('channelReadTimestamps', JSON.stringify(this.lastReadTimestamps));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
        }
    }

    createChannelUI() {
        this.addChannelStyles();
        this.createChannelButton();
        this.createChannelDropdown();
        this.createChannelSidebar();
    }

    createChannelButton() {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
        const oldBtn = document.getElementById('channelBtn');
        if (oldBtn) oldBtn.remove();

        const channelBtn = document.createElement('button');
        channelBtn.id = 'channelBtn';
        channelBtn.className = 'channel-btn';
        channelBtn.innerHTML = `
            <span class="channel-btn-icon">üì¢</span>
            <span class="channel-btn-text">${this.channels[this.currentChannel].name}</span>
            <span class="channel-btn-arrow">‚ñº</span>
        `;
        channelBtn.title = '–°–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª - –¢–µ–∫—É—â–∏–π: ' + this.channels[this.currentChannel].description;
        
        const header = document.querySelector('.chat-header');
        if (header) {
            const existingBtn = header.querySelector('#channelBtn');
            if (!existingBtn) {
                header.appendChild(channelBtn);
            }
        }

        channelBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            this.toggleChannelDropdown();
        });
    }

    createChannelDropdown() {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π dropdown –µ—Å–ª–∏ –µ—Å—Ç—å
        const oldDropdown = document.getElementById('channelDropdown');
        if (oldDropdown) oldDropdown.remove();

        const dropdown = document.createElement('div');
        dropdown.id = 'channelDropdown';
        dropdown.className = 'channel-dropdown hidden';
        
        const header = document.createElement('div');
        header.className = 'channel-dropdown-header';
        header.innerHTML = `
            <span>–ö–∞–Ω–∞–ª—ã</span>
            <span class="channel-count">${Object.keys(this.channels).length}</span>
        `;
        dropdown.appendChild(header);

        const channelsList = document.createElement('div');
        channelsList.className = 'channel-list';
        
        for (const [channelId, channelData] of Object.entries(this.channels)) {
            const channelItem = this.createChannelItem(channelId, channelData);
            channelsList.appendChild(channelItem);
        }
        
        dropdown.appendChild(channelsList);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const footer = this.createDropdownFooter();
        dropdown.appendChild(footer);
        
        document.body.appendChild(dropdown);
    }

    createChannelItem(channelId, channelData) {
        const channelItem = document.createElement('div');
        channelItem.className = `channel-item ${this.currentChannel === channelId ? 'active' : ''}`;
        channelItem.setAttribute('data-channel', channelId);
        
        const unreadCount = this.unreadCounts[channelId] || 0;
        const hasUnread = unreadCount > 0;
        
        channelItem.innerHTML = `
            <div class="channel-item-main">
                <span class="channel-icon" style="color: ${channelData.color}">${channelData.name.split(' ')[0]}</span>
                <div class="channel-info">
                    <span class="channel-name">${channelData.name}</span>
                    <span class="channel-desc">${channelData.description}</span>
                </div>
            </div>
            <div class="channel-meta">
                ${hasUnread ? `<span class="unread-badge">${unreadCount}</span>` : ''}
                <span class="member-count">${this.getChannelMemberCount(channelId)}</span>
            </div>
        `;
        
        channelItem.addEventListener('click', (e) => {
            e.stopPropagation();
            this.switchChannel(channelId);
            this.hideChannelDropdown();
        });
        
        return channelItem;
    }

    createDropdownFooter() {
        const footer = document.createElement('div');
        footer.className = 'channel-dropdown-footer';
        
        if (currentUser) {
            footer.innerHTML = `
                <div class="user-info">
                    <span class="user-avatar">${userAvatarUrl ? `<img src="${userAvatarUrl}" alt="${currentUser}">` : 'üë§'}</span>
                    <span class="user-name">${currentUser}</span>
                </div>
                <div class="channel-stats">
                    <span>–ê–∫—Ç–∏–≤–µ–Ω –≤: ${this.getCurrentChannelName()}</span>
                </div>
            `;
        } else {
            footer.innerHTML = `<div class="user-info">–í–æ–π–¥–∏—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤</div>`;
        }
        
        return footer;
    }

    createChannelSidebar() {
        // –°–æ–∑–¥–∞–µ–º –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        if (window.innerWidth < 768) return;

        const existingSidebar = document.getElementById('channelSidebar');
        if (existingSidebar) return;

        const sidebar = document.createElement('div');
        sidebar.id = 'channelSidebar';
        sidebar.className = 'channel-sidebar';
        
        const sidebarHeader = document.createElement('div');
        sidebarHeader.className = 'sidebar-header';
        sidebarHeader.innerHTML = `
            <h3>–ö–∞–Ω–∞–ª—ã</h3>
            <button class="sidebar-toggle">‚àí</button>
        `;
        sidebar.appendChild(sidebarHeader);

        const channelsList = document.createElement('div');
        channelsList.className = 'sidebar-channels';
        
        for (const [channelId, channelData] of Object.entries(this.channels)) {
            const sidebarItem = this.createSidebarChannelItem(channelId, channelData);
            channelsList.appendChild(sidebarItem);
        }
        
        sidebar.appendChild(channelsList);
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–π–¥–±–∞—Ä –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º —á–∞—Ç–æ–º
        const chatContainer = document.querySelector('.chat-container');
        if (chatContainer) {
            chatContainer.parentNode.insertBefore(sidebar, chatContainer);
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è —Å–∞–π–¥–±–∞—Ä–∞
        sidebarHeader.querySelector('.sidebar-toggle').addEventListener('click', () => {
            sidebar.classList.toggle('collapsed');
        });
    }

    createSidebarChannelItem(channelId, channelData) {
        const item = document.createElement('div');
        item.className = `sidebar-channel-item ${this.currentChannel === channelId ? 'active' : ''}`;
        item.setAttribute('data-channel', channelId);
        
        const unreadCount = this.unreadCounts[channelId] || 0;
        
        item.innerHTML = `
            <span class="channel-icon" style="color: ${channelData.color}">${channelData.name.split(' ')[0]}</span>
            <span class="channel-name">${channelData.name}</span>
            ${unreadCount > 0 ? `<span class="sidebar-unread-badge">${unreadCount}</span>` : ''}
            <span class="member-count">${this.getChannelMemberCount(channelId)}</span>
        `;
        
        item.addEventListener('click', () => {
            this.switchChannel(channelId);
        });
        
        return item;
    }

    addChannelStyles() {
        const styles = `
            .channel-btn {
                background: var(--button-bg);
                border: 1px solid var(--border-color);
                border-radius: 12px;
                padding: 8px 16px;
                cursor: pointer;
                font-size: 14px;
                margin-left: 10px;
                color: var(--text-color);
                min-width: 140px;
                display: flex;
                align-items: center;
                gap: 8px;
                transition: all 0.3s ease;
                position: relative;
            }

            .channel-btn:hover {
                background: var(--button-hover-bg);
                transform: translateY(-1px);
                box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            }

            .channel-btn:disabled {
                opacity: 0.6;
                cursor: not-allowed;
                transform: none;
            }

            .channel-btn-icon {
                font-size: 16px;
            }

            .channel-btn-text {
                flex: 1;
                text-align: left;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;
            }

            .channel-btn-arrow {
                font-size: 10px;
                transition: transform 0.3s ease;
            }

            .channel-btn.open .channel-btn-arrow {
                transform: rotate(180deg);
            }

            .channel-dropdown {
                position: fixed;
                background: var(--header-bg);
                border: 1px solid var(--border-color);
                border-radius: 12px;
                padding: 0;
                z-index: 10000;
                width: 280px;
                box-shadow: 0 8px 24px rgba(0,0,0,0.3);
                backdrop-filter: blur(10px);
                opacity: 0;
                transform: translateY(-10px);
                transition: all 0.3s ease;
            }

            .channel-dropdown:not(.hidden) {
                opacity: 1;
                transform: translateY(0);
            }

            .channel-dropdown.hidden {
                display: none;
            }

            .channel-dropdown-header {
                padding: 16px;
                border-bottom: 1px solid var(--border-color);
                display: flex;
                justify-content: space-between;
                align-items: center;
                font-weight: bold;
                background: rgba(0,0,0,0.1);
            }

            .channel-count {
                background: var(--accent-color);
                color: white;
                padding: 2px 8px;
                border-radius: 12px;
                font-size: 12px;
            }

            .channel-list {
                max-height: 300px;
                overflow-y: auto;
                padding: 8px;
            }

            .channel-item {
                padding: 12px;
                border-radius: 8px;
                cursor: pointer;
                margin: 4px 0;
                color: var(--text-color);
                display: flex;
                justify-content: space-between;
                align-items: center;
                transition: all 0.2s ease;
            }

            .channel-item:hover {
                background: rgba(79, 172, 254, 0.15);
            }

            .channel-item.active {
                background: rgba(79, 172, 254, 0.25);
                border-left: 3px solid var(--accent-color);
            }

            .channel-item-main {
                display: flex;
                align-items: center;
                gap: 12px;
                flex: 1;
            }

            .channel-icon {
                font-size: 18px;
                width: 24px;
                text-align: center;
            }

            .channel-info {
                display: flex;
                flex-direction: column;
                flex: 1;
            }

            .channel-name {
                font-weight: 600;
                font-size: 14px;
            }

            .channel-desc {
                font-size: 12px;
                opacity: 0.7;
                margin-top: 2px;
            }

            .channel-meta {
                display: flex;
                align-items: center;
                gap: 8px;
            }

            .unread-badge {
                background: #E74C3C;
                color: white;
                border-radius: 10px;
                padding: 2px 6px;
                font-size: 11px;
                font-weight: bold;
                min-width: 18px;
                text-align: center;
            }

            .member-count {
                background: rgba(255,255,255,0.1);
                padding: 2px 6px;
                border-radius: 8px;
                font-size: 11px;
            }

            .channel-dropdown-footer {
                padding: 12px 16px;
                border-top: 1px solid var(--border-color);
                background: rgba(0,0,0,0.05);
                font-size: 12px;
            }

            .user-info {
                display: flex;
                align-items: center;
                gap: 8px;
                margin-bottom: 8px;
            }

            .user-avatar img {
                width: 20px;
                height: 20px;
                border-radius: 50%;
            }

            .channel-sidebar {
                width: 250px;
                background: var(--sidebar-bg, rgba(30, 30, 40, 0.95));
                border-right: 1px solid var(--border-color);
                height: 100vh;
                position: fixed;
                left: 0;
                top: 0;
                z-index: 100;
                transition: transform 0.3s ease;
                backdrop-filter: blur(10px);
            }

            .sidebar-header {
                padding: 20px;
                border-bottom: 1px solid var(--border-color);
                display: flex;
                justify-content: space-between;
                align-items: center;
            }

            .sidebar-header h3 {
                margin: 0;
                color: var(--text-color);
            }

            .sidebar-toggle {
                background: none;
                border: none;
                color: var(--text-color);
                cursor: pointer;
                font-size: 18px;
                padding: 4px;
            }

            .sidebar-channels {
                padding: 16px 0;
            }

            .sidebar-channel-item {
                padding: 12px 20px;
                display: flex;
                align-items: center;
                gap: 12px;
                cursor: pointer;
                transition: all 0.2s ease;
                position: relative;
            }

            .sidebar-channel-item:hover {
                background: rgba(255,255,255,0.05);
            }

            .sidebar-channel-item.active {
                background: rgba(79, 172, 254, 0.2);
                border-right: 3px solid var(--accent-color);
            }

            .sidebar-unread-badge {
                background: #E74C3C;
                color: white;
                border-radius: 8px;
                padding: 2px 6px;
                font-size: 10px;
                margin-left: auto;
            }

            .channel-system-notification {
                background: rgba(79, 172, 254, 0.1);
                border: 1px solid rgba(79, 172, 254, 0.3);
                border-radius: 8px;
                padding: 12px 16px;
                margin: 8px 0;
                text-align: center;
                font-size: 13px;
                color: var(--text-color);
            }

            .channel-system-notification .channel-name {
                font-weight: bold;
                color: var(--accent-color);
            }

            .loading {
                text-align: center;
                padding: 20px;
                color: var(--text-color);
                opacity: 0.7;
            }

            .send-btn-loading {
                position: relative;
                color: transparent !important;
            }

            .send-btn-loading::after {
                content: '';
                position: absolute;
                width: 16px;
                height: 16px;
                top: 50%;
                left: 50%;
                margin: -8px 0 0 -8px;
                border: 2px solid transparent;
                border-top: 2px solid var(--text-color);
                border-radius: 50%;
                animation: spin 1s linear infinite;
            }

            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }

            @media (max-width: 768px) {
                .channel-sidebar {
                    transform: translateX(-100%);
                }
                
                .channel-sidebar:not(.collapsed) {
                    transform: translateX(0);
                }
                
                .channel-btn {
                    min-width: 120px;
                }
            }
        `;

        const styleSheet = document.createElement('style');
        styleSheet.textContent = styles;
        document.head.appendChild(styleSheet);
    }

    toggleChannelDropdown() {
        if (this.isDropdownOpen) {
            this.hideChannelDropdown();
        } else {
            this.showChannelDropdown();
        }
    }

    showChannelDropdown() {
        const dropdown = document.getElementById('channelDropdown');
        const btn = document.getElementById('channelBtn');
        
        if (dropdown && btn) {
            const rect = btn.getBoundingClientRect();
            dropdown.style.top = (rect.bottom + 5) + 'px';
            dropdown.style.left = (rect.left) + 'px';
            dropdown.classList.remove('hidden');
            btn.classList.add('open');
            this.isDropdownOpen = true;
        }
    }

    hideChannelDropdown() {
        const dropdown = document.getElementById('channelDropdown');
        const btn = document.getElementById('channelBtn');
        
        if (dropdown) {
            dropdown.classList.add('hidden');
        }
        if (btn) {
            btn.classList.remove('open');
        }
        this.isDropdownOpen = false;
    }

    switchChannel(channelId) {
        if (this.currentChannel === channelId) return;

        console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–∞–Ω–∞–ª –Ω–∞:', channelId);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º timestamp –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞
        this.lastReadTimestamps[this.currentChannel] = Date.now();
        
        const previousChannel = this.currentChannel;
        this.currentChannel = channelId;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        this.unreadCounts[channelId] = 0;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        this.saveUserPreferences();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.updateChannelUI();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showChannelSwitchNotification(previousChannel, channelId);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        this.loadChannelMessages();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–æ–≤
        this.updateChannelStats();
    }

    updateChannelUI() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        const btn = document.getElementById('channelBtn');
        if (btn) {
            const channelData = this.channels[this.currentChannel];
            btn.innerHTML = `
                <span class="channel-btn-icon">${channelData.name.split(' ')[0]}</span>
                <span class="channel-btn-text">${channelData.name}</span>
                <span class="channel-btn-arrow">‚ñº</span>
            `;
            btn.title = `–°–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª - –¢–µ–∫—É—â–∏–π: ${channelData.description}`;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ dropdown
        document.querySelectorAll('.channel-item').forEach(item => {
            item.classList.toggle('active', item.getAttribute('data-channel') === this.currentChannel);
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∞–π–¥–±–∞—Ä
        document.querySelectorAll('.sidebar-channel-item').forEach(item => {
            item.classList.toggle('active', item.getAttribute('data-channel') === this.currentChannel);
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
        this.updateUnreadBadges();
    }

    showChannelSwitchNotification(previousChannel, newChannel) {
        const previousName = this.channels[previousChannel].name;
        const newName = this.channels[newChannel].name;
        
        showNotification(`üì¢ –ü–µ—Ä–µ—Ö–æ–¥: ${previousName} ‚Üí ${newName}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
        this.addSystemMessage(`–í—ã –ø–µ—Ä–µ—à–ª–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞ "${previousName}" –≤ –∫–∞–Ω–∞–ª "${newName}"`);
    }

    addSystemMessage(text) {
        const messageData = {
            text: text,
            name: '–°–∏—Å—Ç–µ–º–∞',
            userId: 'system',
            timestamp: Date.now(),
            isSystem: true,
            userColor: '#4FACE5'
        };

        this.sendChannelMessage(messageData, true);
    }

    loadChannelMessages() {
        const messagesContainer = document.getElementById('messagesContainer');
        if (!messagesContainer) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        messagesContainer.innerHTML = '<div class="loading">üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...</div>';

        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if (this.messagesListener) {
            database.ref(`channels/${this.currentChannel}/messages`).off('child_added', this.messagesListener);
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞
        this.messagesListener = database.ref(`channels/${this.currentChannel}/messages`)
            .orderByChild('timestamp')
            .limitToLast(100)
            .on('child_added', (snapshot) => {
                const message = snapshot.val();
                if (!message) return;

                message.id = snapshot.key;

                // –£–±–∏—Ä–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
                const loading = messagesContainer.querySelector('.loading');
                if (loading) {
                    loading.remove();
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
                if (message.channel !== this.currentChannel && !message.isSystem) {
                    this.handleUnreadMessage(message.channel, message.timestamp);
                }

                // –î–µ—à–∏—Ñ—Ä—É–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if (!message.isSystem && message.type !== 'gift') {
                    try {
                        message.text = decryptMessage(message.text);
                        if (message.quotedMessage) {
                            message.quotedMessage.text = decryptMessage(message.quotedMessage.text);
                        }
                    } catch (e) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∏:', e);
                    }
                }

                // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª
                if (message.channel === this.currentChannel || message.isSystem) {
                    addMessageToChat(message);
                }

                // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
                setTimeout(() => {
                    messagesContainer.scrollTop = messagesContainer.scrollHeight;
                }, 100);
            });

        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        setTimeout(() => {
            const loading = messagesContainer.querySelector('.loading');
            if (loading) {
                loading.innerHTML = 'üí¨ –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –ø—É—Å—Ç. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –Ω–∞–ø–∏—à–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ!';
            }
        }, 3000);
    }

    handleUnreadMessage(channelId, timestamp) {
        if (channelId === this.currentChannel) return;
        
        const lastRead = this.lastReadTimestamps[channelId] || 0;
        if (timestamp > lastRead) {
            this.unreadCounts[channelId] = (this.unreadCounts[channelId] || 0) + 1;
            this.updateUnreadBadges();
        }
    }

    updateUnreadBadges() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂–∏ –≤ dropdown
        document.querySelectorAll('.channel-item').forEach(item => {
            const channelId = item.getAttribute('data-channel');
            const unreadCount = this.unreadCounts[channelId] || 0;
            const badge = item.querySelector('.unread-badge');
            const meta = item.querySelector('.channel-meta');
            
            if (unreadCount > 0) {
                if (!badge) {
                    const newBadge = document.createElement('span');
                    newBadge.className = 'unread-badge';
                    newBadge.textContent = unreadCount;
                    meta.insertBefore(newBadge, meta.querySelector('.member-count'));
                } else {
                    badge.textContent = unreadCount;
                }
            } else if (badge) {
                badge.remove();
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂–∏ –≤ —Å–∞–π–¥–±–∞—Ä–µ
        document.querySelectorAll('.sidebar-channel-item').forEach(item => {
            const channelId = item.getAttribute('data-channel');
            const unreadCount = this.unreadCounts[channelId] || 0;
            let badge = item.querySelector('.sidebar-unread-badge');
            
            if (unreadCount > 0) {
                if (!badge) {
                    badge = document.createElement('span');
                    badge.className = 'sidebar-unread-badge';
                    item.appendChild(badge);
                }
                badge.textContent = unreadCount;
            } else if (badge) {
                badge.remove();
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º title –∫–Ω–æ–ø–∫–∏
        const btn = document.getElementById('channelBtn');
        if (btn) {
            const totalUnread = Object.values(this.unreadCounts).reduce((sum, count) => sum + count, 0);
            const channelData = this.channels[this.currentChannel];
            let title = `–¢–µ–∫—É—â–∏–π: ${channelData.description}`;
            
            if (totalUnread > 0) {
                title += ` (${totalUnread} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö)`;
            }
            
            btn.title = title;
        }
    }

    sendChannelMessage(messageData, isSystem = false) {
        if (!this.currentChannel && !isSystem) return;

        const messageWithChannel = {
            ...messageData,
            channel: this.currentChannel,
            timestamp: Date.now(),
            isSystem: isSystem
        };

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏
        this.setSendButtonLoading(true);

        database.ref(`channels/${this.currentChannel}/messages`).push(messageWithChannel, (error) => {
            // –°–Ω–∏–º–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏
            this.setSendButtonLoading(false);
            
            if (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", error);
                showNotification("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è");
            } else {
                updateMessageCount();
                if (typeof addXP === 'function' && !isSystem) {
                    addXP(5, '—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ');
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                this.updateUserActivity();
            }
        });
    }

    setSendButtonLoading(isLoading) {
        const sendBtn = document.getElementById('sendBtn');
        if (sendBtn) {
            if (isLoading) {
                sendBtn.disabled = true;
                sendBtn.classList.add('send-btn-loading');
            } else {
                sendBtn.disabled = false;
                sendBtn.classList.remove('send-btn-loading');
            }
        }
    }

    updateUserActivity() {
        if (!currentUser) return;
        
        const userActivityRef = database.ref(`channels/${this.currentChannel}/activeUsers/${userId}`);
        userActivityRef.set({
            username: currentUser,
            timestamp: Date.now(),
            avatar: userAvatarUrl
        });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        setTimeout(() => {
            userActivityRef.remove();
        }, 5 * 60 * 1000);
    }

    getChannelMemberCount(channelId) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã –±—ã–ª–∞ –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const baseCount = Math.floor(Math.random() * 5) + 1;
        return `${baseCount}üë§`;
    }

    initializeChannelStats() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        Object.keys(this.channels).forEach(channelId => {
            database.ref(`channels/${channelId}/activeUsers`).on('value', (snapshot) => {
                const users = snapshot.val() || {};
                this.channelMembers[channelId] = Object.keys(users).length;
                this.updateMemberCounts();
            });
        });
    }

    updateMemberCounts() {
        document.querySelectorAll('.member-count').forEach(element => {
            const channelId = element.closest('[data-channel]')?.getAttribute('data-channel');
            if (channelId && this.channelMembers[channelId] !== undefined) {
                element.textContent = `${this.channelMembers[channelId]}üë§`;
            }
        });
    }

    updateChannelStats() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
        this.updateMemberCounts();
    }

    overrideSendMessage() {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        this.originalSendFunction = window.sendMessage;

        window.sendMessage = () => {
            // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            if (this.isSendingMessage) {
                console.log('üõë –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∞ –¥–≤–æ–π–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è');
                return;
            }

            const messageInput = document.getElementById('messageInput');
            const messageText = messageInput ? messageInput.value.trim() : '';
            
            if (!messageText) {
                // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞, –≤—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é (–µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å)
                if (this.originalSendFunction) {
                    this.originalSendFunction();
                }
                return;
            }

            if (!currentUser) {
                showNotification('‚ùå –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π');
                return;
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏
            this.isSendingMessage = true;

            try {
                // –®–∏—Ñ—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                const encryptedText = encryptMessage(messageText);
                
                const messageData = {
                    text: encryptedText,
                    name: currentUser,
                    userId: userId,
                    timestamp: Date.now(),
                    isDeveloper: isDeveloper,
                    isTester: isTester,
                    userColor: userColor,
                    avatar: userAvatarUrl,
                    channel: this.currentChannel
                };

                // –î–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ç–∏—Ä—É–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                if (window.quotedMessage) {
                    messageData.quotedMessage = {
                        id: window.quotedMessage.id,
                        name: window.quotedMessage.name,
                        text: encryptMessage(window.quotedMessage.text),
                        channel: window.quotedMessage.channel || this.currentChannel
                    };
                }

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
                this.sendChannelMessage(messageData);

                // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
                if (messageInput) {
                    messageInput.value = '';
                }
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                window.quotedMessage = null;
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
            } finally {
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                setTimeout(() => {
                    this.isSendingMessage = false;
                }, 1000);
            }
        };
    }

    setupEventListeners() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ dropdown –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
        document.addEventListener('click', (e) => {
            const dropdown = document.getElementById('channelDropdown');
            const btn = document.getElementById('channelBtn');
            
            if (dropdown && !dropdown.contains(e.target) && btn && !btn.contains(e.target)) {
                this.hideChannelDropdown();
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey && e.key === 'k') {
                e.preventDefault();
                this.toggleChannelDropdown();
            }
            
            // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ Enter
            if (e.key === 'Enter' && !e.shiftKey) {
                const messageInput = document.getElementById('messageInput');
                if (document.activeElement === messageInput) {
                    if (this.isSendingMessage) {
                        e.preventDefault();
                        return;
                    }
                }
            }
        });

        // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', () => {
            this.hideChannelDropdown();
        });

        // –ó–∞—â–∏—Ç–∞ –æ—Ç –±—ã—Å—Ç—Ä—ã—Ö –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∫–ª–∏–∫–æ–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
        const sendBtn = document.getElementById('sendBtn');
        if (sendBtn) {
            const originalClickHandler = sendBtn.onclick;
            sendBtn.onclick = (e) => {
                if (this.isSendingMessage) {
                    e.preventDefault();
                    e.stopPropagation();
                    return false;
                }
                if (originalClickHandler) {
                    return originalClickHandler.call(sendBtn, e);
                }
            };
        }
    }

    getCurrentChannel() {
        return this.currentChannel;
    }

    getCurrentChannelName() {
        return this.channels[this.currentChannel]?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª';
    }

    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    addCustomChannel(channelId, channelData) {
        if (this.channels[channelId]) {
            console.warn(`–ö–∞–Ω–∞–ª ${channelId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
            return false;
        }
        
        this.channels[channelId] = channelData;
        this.unreadCounts[channelId] = 0;
        this.lastReadTimestamps[channelId] = Date.now();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.createChannelDropdown();
        this.createChannelSidebar();
        
        return true;
    }

    removeChannel(channelId) {
        if (!this.channels[channelId] || channelId === 'general') {
            console.warn(`–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª ${channelId}`);
            return false;
        }
        
        delete this.channels[channelId];
        delete this.unreadCounts[channelId];
        delete this.lastReadTimestamps[channelId];
        
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ general
        if (this.currentChannel === channelId) {
            this.switchChannel('general');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.createChannelDropdown();
        this.createChannelSidebar();
        
        return true;
    }

    getChannelInfo(channelId) {
        return this.channels[channelId];
    }

    getAllChannels() {
        return { ...this.channels };
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ —Ñ–ª–∞–≥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–æ–∫)
    resetSendingFlag() {
        this.isSendingMessage = false;
        this.setSendButtonLoading(false);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
let channelSystem;

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
function initChannels() {
    try {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∫–∞–Ω–∞–ª–æ–≤...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞ —É–∂–µ
        if (window.channelSystem) {
            console.log('‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –∫–∞–Ω–∞–ª–æ–≤ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            return;
        }
        
        channelSystem = new EnhancedChannelSystem();
        console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–∞–Ω–∞–ª–æ–≤ –≥–æ—Ç–æ–≤–∞');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        window.channelSystem = channelSystem;
        window.switchChannel = (channelId) => channelSystem.switchChannel(channelId);
        window.getCurrentChannel = () => channelSystem.getCurrentChannel();
        window.resetSendingFlag = () => channelSystem.resetSendingFlag();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤:', error);
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showChannelNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `channel-notification channel-notification-${type}`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.remove();
    }, 3000);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–≥–¥–∞ DOM –≥–æ—Ç–æ–≤
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initChannels);
} else {
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
    setTimeout(initChannels, 1000);
}

// –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
let channelsInitialized = false;
const originalInitChannels = initChannels;
initChannels = function() {
    if (channelsInitialized) {
        console.log('‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –∫–∞–Ω–∞–ª–æ–≤ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        return;
    }
    channelsInitialized = true;
    originalInitChannels();
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { EnhancedChannelSystem, initChannels };
}